/* The following code was generated by JFlex 1.7.0 */

package com.js.interpreter.tokenizer;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;

import com.js.interpreter.exceptions.grouping.EnumeratedGroupingException;
import com.js.interpreter.exceptions.grouping.EnumeratedGroupingException.grouping_exception_types;
import com.js.interpreter.exceptions.grouping.StrayCharacterException;
import com.js.interpreter.linenumber.LineInfo;
import com.js.interpreter.startup.ScriptSource;
import com.js.interpreter.tokens.*;
import com.js.interpreter.tokens.basic.*;
import com.js.interpreter.tokens.closing.*;
import com.js.interpreter.tokens.grouping.*;
import com.js.interpreter.tokens.value.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/com/js/interpreter/tokenizer/Lexer.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRINGDONE = 4;
  public static final int STRINGPOUND = 6;
  public static final int INCLUDE = 8;
  public static final int INCLUDE_DBL_QUOTE = 10;
  public static final int INCLUDE_SNGL_QUOTE = 12;
  public static final int END_INCLUDE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\1\66\1\66\1\5\22\0\1\71\1\0\1\70"+
    "\1\67\1\16\2\0\1\65\1\10\1\13\1\11\1\42\1\56\1\43"+
    "\1\3\1\15\12\2\1\55\1\57\1\44\1\41\1\45\1\0\1\46"+
    "\1\27\1\60\1\22\1\25\1\26\1\50\1\54\1\36\1\20\1\1"+
    "\1\62\1\23\1\40\1\21\1\30\1\53\1\1\1\32\1\35\1\31"+
    "\1\24\1\37\1\51\1\33\1\52\1\1\1\63\1\0\1\64\1\47"+
    "\1\1\1\0\1\27\1\60\1\22\1\25\1\26\1\50\1\54\1\36"+
    "\1\20\1\1\1\62\1\23\1\40\1\21\1\30\1\53\1\1\1\32"+
    "\1\35\1\31\1\24\1\37\1\51\1\33\1\52\1\1\1\12\1\7"+
    "\1\14\7\0\1\66\252\0\2\17\115\0\1\34\u1ea8\0\1\66\1\66"+
    "\u0100\0\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\2\13\3\1\2"+
    "\3\3\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\3\3\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\1\1\30\1\31\4\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\6\1\40\1\41\1\42\1\1\1\43\2\44"+
    "\1\45\1\0\1\45\1\46\1\0\1\47\3\0\1\6"+
    "\3\0\2\50\4\3\1\0\1\3\1\51\4\3\1\52"+
    "\1\53\1\54\5\3\1\0\3\3\1\55\1\56\1\57"+
    "\5\3\1\60\2\3\1\61\1\62\1\61\1\0\1\63"+
    "\2\0\1\64\3\0\2\6\1\65\1\0\3\3\2\66"+
    "\1\3\1\67\1\0\1\3\1\70\6\3\1\71\1\72"+
    "\1\73\1\72\1\73\1\74\1\75\2\3\1\76\1\0"+
    "\4\3\1\77\2\0\2\100\1\0\1\3\1\0\2\3"+
    "\2\101\1\3\1\102\1\103\1\104\3\3\1\0\2\3"+
    "\1\0\3\3\1\0\2\3\1\0\2\105\2\106\1\3"+
    "\1\107\3\3\2\110\1\3\2\111\2\3\2\112\2\113"+
    "\1\0\1\114\1\115\1\116\1\0\4\3\2\0\1\3"+
    "\1\117\1\3\1\120\1\0\2\121\1\3\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u01d0\0\u032c"+
    "\0\u01d0\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u01d0\0\u01d0\0\u01d0\0\u0740\0\u077a\0\u01d0"+
    "\0\u01d0\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u01d0\0\u01d0\0\u089c"+
    "\0\u01d0\0\u01d0\0\u01d0\0\u08d6\0\u01d0\0\u0910\0\u01d0\0\u094a"+
    "\0\u0984\0\u0366\0\u01d0\0\u01d0\0\u01d0\0\u09be\0\u09f8\0\u0a32"+
    "\0\u01d0\0\u09f8\0\u09f8\0\u0a6c\0\u01d0\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b1a\0\u0b54\0\u0b1a\0\u0b8e\0\u01d0\0\u032c\0\u0984\0\u0bc8"+
    "\0\u0984\0\u0c02\0\u0c3c\0\u0c76\0\u01d0\0\u020a\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u020a\0\u020a\0\u020a\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u01d0\0\u01d0\0\u01d0"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u01d0\0\u125a\0\u1294"+
    "\0\u01d0\0\u0a6c\0\u0a6c\0\u0b54\0\u0b8e\0\u12ce\0\u1308\0\u12ce"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u01d0\0\u020a\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u01d0\0\u020a\0\u1512\0\u020a\0\u154c\0\u1586"+
    "\0\u020a\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u020a"+
    "\0\u01d0\0\u01d0\0\u020a\0\u020a\0\u020a\0\u020a\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u12ce\0\u18ec"+
    "\0\u1926\0\u01d0\0\u020a\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u01d0\0\u020a\0\u1a82\0\u020a\0\u020a\0\u020a\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u01d0\0\u020a\0\u01d0\0\u020a"+
    "\0\u1de8\0\u020a\0\u1e22\0\u1e5c\0\u1e96\0\u01d0\0\u020a\0\u1ed0"+
    "\0\u01d0\0\u020a\0\u1f0a\0\u1f44\0\u01d0\0\u020a\0\u01d0\0\u020a"+
    "\0\u1f7e\0\u020a\0\u020a\0\u020a\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u020a\0\u2188\0\u020a\0\u21c2"+
    "\0\u01d0\0\u020a\0\u21fc\0\u020a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\3\15\1\11\1\16\1\17"+
    "\1\20\1\21\1\11\1\22\1\11\1\23\1\24\1\25"+
    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\12\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\12\1\54\1\12\1\55\1\56\1\57\1\60\1\11"+
    "\1\12\1\61\1\62\1\63\1\0\2\11\1\15\5\64"+
    "\2\65\56\64\1\66\4\64\4\67\3\15\1\67\1\70"+
    "\1\67\1\71\2\67\1\72\47\67\1\73\1\0\1\74"+
    "\1\67\1\15\2\75\1\76\2\75\1\0\60\75\1\0"+
    "\3\75\4\77\1\100\2\15\2\77\1\101\1\77\2\101"+
    "\50\77\1\102\2\77\1\103\1\15\5\104\2\105\61\104"+
    "\1\106\6\104\2\65\56\104\1\107\4\104\5\110\1\111"+
    "\3\110\1\112\2\110\1\113\51\110\1\111\3\110\73\0"+
    "\2\12\15\0\14\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\11\0\1\13\1\114\71\0\1\115"+
    "\72\0\3\15\62\0\1\15\11\0\1\116\60\0\11\117"+
    "\1\120\2\117\1\121\1\117\1\122\53\117\11\0\1\123"+
    "\3\0\1\124\124\0\1\125\22\0\2\12\15\0\14\12"+
    "\1\0\4\12\7\0\1\126\4\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\10\12\1\127\3\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\7\12\1\130\1\131\3\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\1\12\1\132\12\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\14\0\1\133"+
    "\1\134\7\12\1\135\3\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\1\12"+
    "\1\136\1\12\1\137\10\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\1\12"+
    "\1\140\10\12\1\141\1\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\12\12"+
    "\1\142\1\12\1\0\4\12\7\0\1\143\4\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\10\12\1\144"+
    "\1\12\1\145\1\12\1\0\1\12\1\146\2\12\7\0"+
    "\2\12\1\147\2\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\6\12\1\150\5\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\10\12\1\151\3\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\45\0\1\152\34\0\2\12\15\0"+
    "\14\12\1\0\1\12\1\153\2\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\7\12\1\154"+
    "\4\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\10\12\1\155\3\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\50\0"+
    "\1\156\3\0\1\157\65\0\1\160\31\0\2\12\15\0"+
    "\4\12\1\161\2\12\1\162\1\163\3\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\14\12\1\0\1\12\1\164\2\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\12\12"+
    "\1\165\1\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\50\0\1\166\31\0\2\12\15\0\6\12"+
    "\1\167\3\12\1\170\1\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\7\0\5\64\2\0\56\64"+
    "\1\0\4\64\65\0\1\171\15\0\1\117\60\0\11\117"+
    "\1\120\2\117\1\121\55\117\2\0\1\76\67\0\5\77"+
    "\2\0\2\77\1\0\1\77\2\0\54\77\1\0\4\77"+
    "\1\100\2\15\2\77\1\0\1\77\2\0\54\77\1\15"+
    "\5\104\2\0\70\104\2\0\61\104\1\172\6\104\2\0"+
    "\56\104\1\173\4\104\11\111\1\174\2\111\1\113\70\111"+
    "\2\0\55\111\2\0\1\175\67\0\13\117\2\0\55\117"+
    "\11\176\1\177\2\176\1\200\2\176\2\201\51\176\11\202"+
    "\1\203\60\202\5\124\1\204\1\205\1\0\62\124\1\0"+
    "\2\12\15\0\11\12\1\206\2\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\14\12\1\207\1\210\3\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\15\0\1\12\1\211\12\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\2\12\15\0\11\12\1\212\2\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\46\0\1\213"+
    "\33\0\2\12\15\0\14\12\1\0\2\12\1\214\1\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\14\12\1\0\4\12\7\0\1\12\1\215\3\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\5\12"+
    "\1\216\6\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\15\0\14\12\1\217\1\220"+
    "\3\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\5\12\1\221\6\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\12\12\1\222\1\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\4\12\1\223"+
    "\7\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\6\12\1\224\5\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\14\12\1\0\4\12\7\0\3\12\1\225"+
    "\1\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\2\12\1\226\11\12\1\0\4\12\7\0\3\12\1\227"+
    "\1\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\12\12\1\230\1\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\32\0\1\231\6\0\1\232\40\0"+
    "\2\12\15\0\3\12\1\233\6\12\1\234\1\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\12\12\1\235\1\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\5\12\1\236\6\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\1\12\1\237"+
    "\12\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\3\12\1\240\10\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\12\12\1\241\1\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\14\0"+
    "\1\242\1\243\13\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\10\12\1\244"+
    "\3\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\14\12\1\0\4\12\7\0"+
    "\4\12\1\245\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\6\12\1\246\5\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\7\0\11\176\1\177\2\176"+
    "\1\200\70\176\2\0\61\176\1\247\4\176\1\177\2\176"+
    "\1\200\4\176\1\250\47\176\1\247\11\202\1\251\60\202"+
    "\11\0\1\203\3\0\1\205\62\0\1\205\111\0\1\252"+
    "\44\0\2\12\15\0\6\12\1\253\5\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\14\12\1\254\1\255\3\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\14\0\1\256\1\257"+
    "\13\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\1\12\1\260\12\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\35\0"+
    "\1\261\44\0\2\12\15\0\6\12\1\262\5\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\7\12\1\263\4\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\6\12\1\264\5\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\1\12\1\265"+
    "\12\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\6\12\1\266\5\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\2\12\15\0\10\12\1\267\3\12\1\0\4\12\7\0"+
    "\5\12\3\0\1\12\1\0\1\12\10\0\2\12\15\0"+
    "\6\12\1\270\5\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\2\12\1\271"+
    "\11\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\14\12\1\272\1\273\3\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\14\12\1\0\4\12\7\0\1\12\1\274\3\12"+
    "\3\0\1\12\1\0\1\12\32\0\1\275\47\0\2\12"+
    "\15\0\3\12\1\276\10\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\2\12"+
    "\1\277\11\12\1\0\4\12\7\0\4\12\1\300\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\14\0\1\301\1\302"+
    "\13\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\10\0\2\12\15\0\7\12\1\303\4\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\7\0"+
    "\11\176\1\177\2\176\1\200\5\176\1\304\47\176\11\202"+
    "\1\251\3\202\1\205\54\202\31\0\1\305\41\0\2\12"+
    "\15\0\11\12\1\306\2\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\32\0\1\307\47\0\2\12"+
    "\15\0\3\12\1\310\10\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\11\12"+
    "\1\311\2\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\15\0\14\12\1\0\4\12"+
    "\7\0\2\12\1\312\2\12\3\0\1\12\1\0\1\12"+
    "\10\0\2\12\15\0\12\12\1\313\1\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\7\12\1\314\4\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\11\12"+
    "\1\315\2\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\35\0\1\316\44\0\2\12\15\0\6\12"+
    "\1\317\5\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\15\0\7\12\1\320\4\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\0\1\12"+
    "\35\0\1\321\44\0\2\12\15\0\6\12\1\322\5\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\2\12\15\0\6\12\1\323\5\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\12\12\1\324\1\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\30\0\1\325\51\0\2\12"+
    "\15\0\1\12\1\326\12\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\14\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\327\1\330"+
    "\7\0\11\176\1\177\2\176\1\200\6\176\1\331\46\176"+
    "\1\0\2\12\15\0\10\12\1\332\3\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\5\12\1\333\6\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\11\12"+
    "\1\334\2\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\14\0\1\335\1\336\13\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\2\12\15\0\12\12\1\337\1\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\5\12\1\340\6\12\1\0\4\12\7\0\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\2\12\15\0\7\12"+
    "\1\341\4\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\7\0\11\176\1\177\2\176\1\200\7\176"+
    "\1\342\45\176\30\0\1\343\42\0\2\12\15\0\10\12"+
    "\1\344\3\12\1\0\4\12\7\0\5\12\3\0\1\12"+
    "\1\0\1\12\10\0\2\12\15\0\5\12\1\345\6\12"+
    "\1\0\4\12\7\0\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\2\12\15\0\4\12\1\346\7\12\1\0\4\12"+
    "\7\0\5\12\3\0\1\12\1\0\1\12\10\0\2\12"+
    "\15\0\14\12\1\0\3\12\1\347\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\7\0\11\176\1\177\2\176\1\200"+
    "\10\176\1\350\44\176\21\0\1\351\51\0\2\12\15\0"+
    "\1\12\1\352\12\12\1\0\4\12\7\0\5\12\3\0"+
    "\1\12\1\0\1\12\10\0\2\12\15\0\12\12\1\353"+
    "\1\12\1\0\4\12\7\0\5\12\3\0\1\12\1\0"+
    "\1\12\7\0\11\176\1\177\2\176\1\200\11\176\1\247"+
    "\43\176\1\0\2\12\15\0\6\12\1\354\5\12\1\0"+
    "\4\12\7\0\5\12\3\0\1\12\1\0\1\12\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\11\5\1\1\11\1\1\1\11"+
    "\21\1\3\11\2\1\2\11\4\1\2\11\1\1\3\11"+
    "\1\1\1\11\1\1\1\11\3\1\3\11\3\1\1\11"+
    "\3\1\1\11\3\1\1\0\2\1\1\0\1\11\3\0"+
    "\1\1\3\0\1\11\5\1\1\0\16\1\1\0\3\1"+
    "\3\11\5\1\1\11\2\1\1\11\2\1\1\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\11\3\1\1\0\11\1\2\11\7\1\1\0\5\1"+
    "\2\0\1\11\1\1\1\0\1\1\1\0\2\1\1\11"+
    "\10\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\11\1\1\1\11\6\1\1\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\4\1"+
    "\2\0\4\1\1\0\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Deque<ZzFlexStreamInfo> zzStreams
    = new java.util.ArrayDeque<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    long yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer,
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, long yychar,
                  int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
	List<ScriptSource> searchDirectories;
	Stack<String> sourcenames;
	
	StringBuilder literal=new StringBuilder();

	private String tmpname;
	private Reader tmpreader;
	void addInclude(String name) throws FileNotFoundException {
		for (ScriptSource s : searchDirectories) {
			Reader r = s.read(name);
			if (r != null) {
				this.tmpreader=r;
				this.tmpname=name;
				return;
			}
		}
		throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
	}
	
	void commitInclude() {
		sourcenames.push(tmpname);
		yypushStream(tmpreader);
	}
	
	LineInfo getLine() {
		return new LineInfo(yyline,yycolumn,sourcenames.peek());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
  		sourcenames=new Stack<String>();
		sourcenames.push(sourcename);
		this.searchDirectories = searchDirectories;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;           // indicate end of file
    zzEndRead = zzStartRead;  // invalidate buffer

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an {@code <<EOF>>} action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    yyResetPosition();
  }


  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack.
   *
   * @throws java.util.NoSuchElementException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	if (!yymoreStreams()) {
		return new EOF_Token(getLine());
	}
	sourcenames.pop();
	yypopStream();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { literal.append(yytext());
            } 
            // fall through
          case 83: break;
          case 2: 
            { return new GroupingExceptionToken(new StrayCharacterException(getLine(),yytext().charAt(0)));
            } 
            // fall through
          case 84: break;
          case 3: 
            { return new WordToken(getLine(),yytext().toLowerCase());
            } 
            // fall through
          case 85: break;
          case 4: 
            { return new IntegerToken(getLine(),Integer.parseInt(yytext()));
            } 
            // fall through
          case 86: break;
          case 5: 
            { return new PeriodToken(getLine());
            } 
            // fall through
          case 87: break;
          case 6: 
            { 
            } 
            // fall through
          case 88: break;
          case 7: 
            { return new ParenthesizedToken(getLine());
            } 
            // fall through
          case 89: break;
          case 8: 
            { return new OperatorToken(getLine(),OperatorTypes.MULTIPLY);
            } 
            // fall through
          case 90: break;
          case 9: 
            { return new EndParenToken(getLine());
            } 
            // fall through
          case 91: break;
          case 10: 
            { return new OperatorToken(getLine(),OperatorTypes.DIVIDE);
            } 
            // fall through
          case 92: break;
          case 11: 
            { return new OperatorToken(getLine(),OperatorTypes.EQUALS);
            } 
            // fall through
          case 93: break;
          case 12: 
            { return new OperatorToken(getLine(),OperatorTypes.PLUS);
            } 
            // fall through
          case 94: break;
          case 13: 
            { return new OperatorToken(getLine(),OperatorTypes.MINUS);
            } 
            // fall through
          case 95: break;
          case 14: 
            { return new OperatorToken(getLine(),OperatorTypes.LESSTHAN);
            } 
            // fall through
          case 96: break;
          case 15: 
            { return new OperatorToken(getLine(),OperatorTypes.GREATERTHAN);
            } 
            // fall through
          case 97: break;
          case 16: 
            { return new OperatorToken(getLine(),OperatorTypes.ADDRESS);
            } 
            // fall through
          case 98: break;
          case 17: 
            { return new OperatorToken(getLine(),OperatorTypes.DEREF);
            } 
            // fall through
          case 99: break;
          case 18: 
            { return new ColonToken(getLine());
            } 
            // fall through
          case 100: break;
          case 19: 
            { return new CommaToken(getLine());
            } 
            // fall through
          case 101: break;
          case 20: 
            { return new SemicolonToken(getLine());
            } 
            // fall through
          case 102: break;
          case 21: 
            { return new BracketedToken(getLine());
            } 
            // fall through
          case 103: break;
          case 22: 
            { return new EndBracketToken(getLine());
            } 
            // fall through
          case 104: break;
          case 23: 
            { literal.setLength(0);
		yybegin(STRING);
            } 
            // fall through
          case 105: break;
          case 24: 
            { return new GroupingExceptionToken(getLine(),grouping_exception_types.NEWLINE_IN_QUOTES);
            } 
            // fall through
          case 106: break;
          case 25: 
            { yybegin(STRINGDONE);
            } 
            // fall through
          case 107: break;
          case 26: 
            { yypushback(1);
			yybegin(YYINITIAL); 
			if(literal.length()==1) {
				return new CharacterToken(getLine(),literal.toString().charAt(0));
			} else {
				return new StringToken(getLine(),literal.toString());
			}
            } 
            // fall through
          case 108: break;
          case 27: 
            { yybegin(STRING);
            } 
            // fall through
          case 109: break;
          case 28: 
            { yybegin(STRINGPOUND);
            } 
            // fall through
          case 110: break;
          case 29: 
            { return new GroupingExceptionToken(getLine(),grouping_exception_types.INCOMPLETE_CHAR);
            } 
            // fall through
          case 111: break;
          case 30: 
            { literal.append((char)Integer.parseInt(yytext())); yybegin(STRINGDONE);
            } 
            // fall through
          case 112: break;
          case 31: 
            { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(),grouping_exception_types.IO_EXCEPTION);
			t.caused = e;
			return new GroupingExceptionToken(t);
    	}
    	yybegin(END_INCLUDE);
            } 
            // fall through
          case 113: break;
          case 32: 
            { return new GroupingExceptionToken(getLine(),grouping_exception_types.MISSING_INCLUDE);
            } 
            // fall through
          case 114: break;
          case 33: 
            { literal.setLength(0); yybegin(INCLUDE_SNGL_QUOTE);
            } 
            // fall through
          case 115: break;
          case 34: 
            { literal.setLength(0); yybegin(INCLUDE_DBL_QUOTE);
            } 
            // fall through
          case 116: break;
          case 35: 
            { return new GroupingExceptionToken(getLine(),grouping_exception_types.IO_EXCEPTION);
            } 
            // fall through
          case 117: break;
          case 36: 
            { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(),grouping_exception_types.IO_EXCEPTION);
			t.caused = e;
			return new GroupingExceptionToken(t);
    	} 
    	yybegin(END_INCLUDE);
            } 
            // fall through
          case 118: break;
          case 37: 
            { return new GroupingExceptionToken(getLine(),
				grouping_exception_types.MISMATCHED_BRACKETS);
            } 
            // fall through
          case 119: break;
          case 38: 
            { yybegin(YYINITIAL); commitInclude();
            } 
            // fall through
          case 120: break;
          case 39: 
            { return new DotDotToken(getLine());
            } 
            // fall through
          case 121: break;
          case 40: 
            { return new IfToken(getLine());
            } 
            // fall through
          case 122: break;
          case 41: 
            { return new DoToken(getLine());
            } 
            // fall through
          case 123: break;
          case 42: 
            { return new OperatorToken(getLine(),OperatorTypes.OR);
            } 
            // fall through
          case 124: break;
          case 43: 
            { return new OfToken(getLine());
            } 
            // fall through
          case 125: break;
          case 44: 
            { return new ToToken(getLine());
            } 
            // fall through
          case 126: break;
          case 45: 
            { return new OperatorToken(getLine(),OperatorTypes.LESSEQ);
            } 
            // fall through
          case 127: break;
          case 46: 
            { return new OperatorToken(getLine(),OperatorTypes.NOTEQUAL);
            } 
            // fall through
          case 128: break;
          case 47: 
            { return new OperatorToken(getLine(),OperatorTypes.GREATEREQ);
            } 
            // fall through
          case 129: break;
          case 48: 
            { return new AssignmentToken(getLine());
            } 
            // fall through
          case 130: break;
          case 49: 
            { literal.append('\'');
            } 
            // fall through
          case 131: break;
          case 50: 
            { literal.append('\"');
            } 
            // fall through
          case 132: break;
          case 51: 
            { return new DoubleToken(getLine(),Double.parseDouble(yytext()));
            } 
            // fall through
          case 133: break;
          case 52: 
            { return new WarningToken(getLine(),"Warning! Unrecognized Compiler Directive!");
            } 
            // fall through
          case 134: break;
          case 53: 
            { return new OperatorToken(getLine(),OperatorTypes.NOT);
            } 
            // fall through
          case 135: break;
          case 54: 
            { return new OperatorToken(getLine(),OperatorTypes.DIV);
            } 
            // fall through
          case 136: break;
          case 55: 
            { return new EndToken(getLine());
            } 
            // fall through
          case 137: break;
          case 56: 
            { return new OperatorToken(getLine(),OperatorTypes.AND);
            } 
            // fall through
          case 138: break;
          case 57: 
            { return new OperatorToken(getLine(),OperatorTypes.XOR);
            } 
            // fall through
          case 139: break;
          case 58: 
            { return new OperatorToken(getLine(),OperatorTypes.SHIFTLEFT);
            } 
            // fall through
          case 140: break;
          case 59: 
            { return new OperatorToken(getLine(),OperatorTypes.SHIFTRIGHT);
            } 
            // fall through
          case 141: break;
          case 60: 
            { return new VarToken(getLine());
            } 
            // fall through
          case 142: break;
          case 61: 
            { return new OperatorToken(getLine(),OperatorTypes.MOD);
            } 
            // fall through
          case 143: break;
          case 62: 
            { return new ForToken(getLine());
            } 
            // fall through
          case 144: break;
          case 63: 
            { yybegin(INCLUDE);
            } 
            // fall through
          case 145: break;
          case 64: 
            { return new CaseToken(getLine());
            } 
            // fall through
          case 146: break;
          case 65: 
            { return new ElseToken(getLine());
            } 
            // fall through
          case 147: break;
          case 66: 
            { return new BooleanToken(getLine(),true);
            } 
            // fall through
          case 148: break;
          case 67: 
            { return new ThenToken(getLine());
            } 
            // fall through
          case 149: break;
          case 68: 
            { return new TypeToken(getLine());
            } 
            // fall through
          case 150: break;
          case 69: 
            { return new ConstToken(getLine());
            } 
            // fall through
          case 151: break;
          case 70: 
            { return new UntilToken(getLine());
            } 
            // fall through
          case 152: break;
          case 71: 
            { return new ArrayToken(getLine());
            } 
            // fall through
          case 153: break;
          case 72: 
            { return new BooleanToken(getLine(),false);
            } 
            // fall through
          case 154: break;
          case 73: 
            { return new WhileToken(getLine());
            } 
            // fall through
          case 155: break;
          case 74: 
            { return new BeginEndToken(getLine());
            } 
            // fall through
          case 156: break;
          case 75: 
            { return new BreakToken(getLine());
            } 
            // fall through
          case 157: break;
          case 76: 
            { return new DowntoToken(getLine());
            } 
            // fall through
          case 158: break;
          case 77: 
            { return new RecordToken(getLine());
            } 
            // fall through
          case 159: break;
          case 78: 
            { return new RepeatToken(getLine());
            } 
            // fall through
          case 160: break;
          case 79: 
            { return new ForwardToken(getLine());
            } 
            // fall through
          case 161: break;
          case 80: 
            { return new ProgramToken(getLine());
            } 
            // fall through
          case 162: break;
          case 81: 
            { return new FunctionToken(getLine());
            } 
            // fall through
          case 163: break;
          case 82: 
            { return new ProcedureToken(getLine());
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
